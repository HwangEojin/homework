day05
	비트연산자
		bit, 정보량의 최소 단위
		1bit 표현할 수 있는 수 0,1
		8bit = 1byte 정보의 기본으로 사용
		장점 : 사람의 언어를 컴퓨터의 언어로 바꾸는 과정을 생략하니까 속도가 빠름.
		10진수-> 2진수
		10 -> 1010(2)
	
	논리연산자
		and / or / not
		논리곱(&&) 두 비트가 모두 1 이면 1
		
		논리합(||) 두 비트중 하나라도 1이면 1
		
		배타논리합(^ XOR) 두 비트가 서로 다르면 1
		
		논리부정(~ NOT) 비트가 0이면 1로 1이면 0
			(~n => -(n+1)) 
			(*부호비트 또한 반대로 바꿔줌)
			(2의 보수 형식으로 음수를 표현)
			00001010 => 10
			11110101 => 5가 아니라 -11
			
			00001010
		+	       1
		----------------
			00001011 => 11

			=> 10이라는 10진수는 2진수로 1010(2)가 된다 
			   컴퓨터는 덧셈만 가능하기 때문에 뺄셈을 구현하려면 음수가 필요하다.
			   비트중 가장 앞(최상위 비트)를 부호 비트로 사용한다(0:양수 ,1음수)
			   1010으로 쓴 양의 정수 10은 01010이다.
		           ~01010 => 부호비트가 1로 바뀌므로 음수로 변환된다.

	
	쉬프트 연산자 (이동)
		A << / >> B : A의 비트를 왼쪽으로 B만큼 이동시킨다.
			      왼쪽에 생기는 빈칸은 부호비트에 따라 달라진다 (양수면 0, 음수면 1)
			      이동중 잘리는 비트는 삭제됨
			ex) 5<<1 = 10 왼쪽으로 한 번 이동하면 숫자가 2배로 증가
		            8>>1 = 4  오른쪽으로 한 번 이동하면 숫자가 절반으로 줄어듬
		

	암호화 복호화
			데이터를 안전하게 전송 , 저장하기 위한 과정
			
			1) 암호화
				원본 데이터를 변형하여 외부에서 알아보기 어려운 형태로 만드는 과정
				특정 알고리즘과 키를 사용해서 원본 데이터를 암호화
				결과로 나온 암호문은 원본 데이터와는 다른 형태의 데이터이며, 키를 알지 못하는 한 해독하기 어렵다.


			2) 복호화
				암호화 된 데이터를 다시 원래의 형태로 되돌리는 과정
				암호화 할 때 사용한 알고리즘과 동일한 키를 사용하여 암호화된 데이터를 해독
				복호화된 결과는 원본 데이터로 복원
				
			+ 대칭키와 비대칭키)
				대칭키 암호화는 하나의 키를 사용하여 데이터를 암호화하고 복호화 한다.
				속도가 빠르고 효율적이며 대부분의 일상적인 데이터 보호작업에 사용
				
			  비대칭키
				두 개의 서로 다른 키, 공개키(public key), 개인키(private key)를 사용하여 데이터를 암호화하고
				복호화 하는법
				공개키는 누구나 알 수 있는 키이며, 개인 키는 소유자만 알고 있어야하는 키
				데이터로 공개키로 암호화하면 개인키로만 복호화할 수 있고, 개인키로 암호화한 데이터는 공개키로만 복호화할 수 있다.
				데이터의 안전한 전송과 디지털 서명에 사용.

	
	제어문
		프로그램의 흐름을 제어
		
		조건문 : 조건식에 따라 실행흐름을 바꿀 수 있다.
			if문, if ~ else문 , if ~elseif ~else문, switch문

		반복문 : 특정 조건을 만족할 때까지 실행코드를 반복
			for문, while문, do ~ while문

		기타제어문 : 흐름을 건너뛰거나 즉시 종료
			break문 , continue;

		1) 조건문
			
			
			1-1. if문
				(조건식)의 결과가 true 이면 중괄호 영역 안으로 들어가서 문장을 실행하고 다음 코드로 진행
				(조건식)의 결과가 false 이면 중괄호 영역 안으로 들어가지 않고 건너뜀
				if(조건식){ 
					실행할 문장
				};

			1.2 if~else문
				(조건식)의 결과가 true 이면 중괄호 영역 안으로 들어가서 문장을 실행하고 다음 코드로 진행
				(조건식)의 결과가 false 이면 else 안으로 들어가고 다음코드로 진행

				if(조건식){
					조건식이 true일때 실행할 문장;
				}else{
					조건식이 false일때 실행할 문장;
				}

			1.3 if~elseif ~else문
				
				if(조건식){
					조건식1이 true일때 실행할 문장;
				}elseif(조건식2){
					조건식1이 false일때 실행할 문장;
				}else{
					조건식1,조건식2가 모두 거짓일때 실행할 문장;
				}



			if : 조건식이 true면 영역안의 코드가 실행됨.
			else if  : 위의 조건식이 false이고 else if 조건식이 true이면 해당 영역 안의 코드가 실행됨
			else : 위 조건식이 모두 거짓일때 실행됨

			1.4 Switch

				조건식의 값에 따라 여러 case 중 하나를 실행한다.
				switch (변수 or 값)
					case 값1: //값 1의 실행문
						break;
					case 값2:
						break;
					case 값3:
						break;
					default :
						위 조건에 해당하지 않을때 실행문;
					-switch문 사용할 수 있는 변수 타입 : byte, short, int, char, String , enum
					-사용할 수 없는 변수 타입 : long, double, float , boolean

				+ 삼항연산자, if문 , switch문 비교
					삼항연산자  : 조건식이 1개 있을 경우
					if문	 : 조건식에 관계연산자와 논리연산자를 연결하거나 여러개의 조건이 있어야하는 경우
					switch 문 : 하나의 변수에 여러 값이 할당될 수 있고 case의 값이 같은지를 비교할때 사용 

		2) 반복문
			특정 조건을 만족할 때 까지 코드 블록을 반복 실행
			-for문 : 반복 횟수가 정해져 있을때,
				for(초기식; 조건식; 증감식;){
					조건식이 true 일 동안 실행
				}

			초기식 : 처음에 설정할 값(변수) int i = 0;
			조건식 : true라면 영역안의 문장을 실행시키고 false면 for문 탈출
			증감식 : 값을 얼마나 증가/감소 시킬지 정하는 식


			-while문 : 조건식이 참인 동안 반복
				실행중 조건식이 거짓(false)가 될 수 있어야 무한루프에 빠지지 않는다.
				
				while(조건식){
					조건식이 true일 동안 실행할 문장
				}

			오류 상황에서 해결방법
				논리연산자를 for문에서 사용할 때 조건의 정확성과 논리적인 순서를 검토하는 것이 중요하다!
				

						