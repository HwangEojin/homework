day08

1.2차원 배열

	1) 2차원 배열의 선언과 생성
		자료형[][] 배열명 = new 자료형 [행][열]
		자료형[][] 배열명 = {{값,값,값},{값,값,값}}

	2) 2차원 배열의 길이
		배열명.length : 행의 길이
		배열명[i].length : 열의 길이
	3) for -each 문(빠른 for문, 확장 for문)
		//1차원
		for(자료형 변수명 : 배열명){
			실행할 문장;
		}
		//2차원
		for(자료형[] 변수명 : 배열명){
			for(자료형 변수명 : 배열명){
			실행할 문장;
			}
		}


2. 배열의 정렬
	1) 정렬 알고리즘
		삽입정렬 = 각 요소를 이미 정렬된 부분에 삽입
		선택정렬 = 배열의 최소값을 찾아 첫 위치로 이동
		버블정렬 = 인접한 두 요소를 비교해서 교환하며 가장 큰 값을 맨 뒤로 이동

	2) 삽입 정렬(insertion Sort)
		배열의 요소를 하나씩 순회하면서 정렬된 부분에 올바른 위치를 찾아 삽입하는 방식
		두번째요소부터 시작하여 이전 요소들과 비교
		비교를 통해 자신의 위치를 찾은 후 그 위치에 삽입
		나머지 요소를 반복적으로 처리한다.

	
	3) 선택 정렬(Selection Sort)
		배열에서 가장 작은 값을 선택하여 현재 위치와 교환하는 방식
		배열에서 가장 작은 값을 찾아 현재 위치로 이동한다
		다음 위치에서 가장 가장 작은 값을 찾아서 이동
		마지막 까지 반복

	4) 버블 정렬 (Bubble Selection)
		인접한 두 요소를 비교하여 교환하는 방식
		반복적으로 배열을 순회하며 인접한 두 요소를 비교한다.
		두 요소의 순서가 잘못되었다면 swap 한다
		각 반복이 끝날때 가장 큰 요소는 배열의 끝으로 이동하여 정렬된 상태가 된다.
		마지막 정렬된 요소를 제외하고 나머지 요소를 비교하고 정렬한다.
		배열이 완전히 정렬될 때까지 이 과정을 반복한다.
		
	5) Arrays.sort()
		java.util.Array 클래스에 포함된 정렬 메소드
		내부적으로  TimSort 알고리즘을 사용하며 합병정렬과 삽입정렬을 결합한 고효율 알고리즘
		기본적으로 오름차순으로 정렬되며 배열을 빠르고 효율적으로 정렬할 수 있다.

	6) Arrays.toString()
		toString() : 배열의 내용을 문자열 형식으로 반환하는 메소드
		배열을 보기 쉽게 출력하기 위해 사용한다.
		기본적으로 1차원 배열의 내용을 출력할 수 있다.

	7) Arrays.DeepToString(배열명)
		다차원 배열의 내용을 출력하기 위해 사용한다.
		


3. 얕은 복사 / 깊은 복사
	복사가 참조를 복사하는지 또는 실제 데이터를 복사하는지에 따라 얕은 복사와 깊은 복사로 나눌 수 있다.
	
	1) 얕은 복사 (shallow copy)
		복사된 객체가 원복 객체를 참조를 공유한다.
		원본고 복사본이 같은 객체를 참조하므로, 하나를 수정하면 다른 하나에도 영향을 미친다.
		배열이나 객체의 복사가 이루어져도 내부 요소는 복사되지 않고 참조값만 복사된다.

	2) 깊은 복사 (deep copy)
		원복 객체의 데이터 자체를 복사하여 복사된 객체와 원본 객체와 독립적이다.
		원복 객체를 수정해도 복사본은 영향을 받지 않는다.
		배열의 경우 내부 요소를 재귀적(Recursion)으로 복사해야한다.
		Arrays.copyOf() : 배열의 내용을 깊은 복사하는 메소드 

	*재귀(Recursion)
		함수가 자기 자신을 호출하는 프로그래밍 기법
		
	
	자바 배열은 C나 C++ 과 달리 포인터 연산을 허용하지 않는다.
	따라서 배열 요소에 접근할 때는 인덱스 연산을 통해 요소에 접근해야한다.
	인덱스 연산을 통해 배열 요소에 접근할 때는 배열 변수의 시작주소와 인덱스 번호를 더한 값이
	해당 요소의 주소가 된다.
	배열 변수는 호출 스택에 할당되며 배열변수에 저장한 값은 배열의 시작 주소를 나타낸다.
	
	배열 요소는 Heap 메모리에 할당되므로 배열 변수가 참조하는 Heap 메모리 위치를 가리키는
	참조(reference) 변수를 스택(stack) 메모리에 저장하는 것이다.

	for - each문

	코드의 가독성을 높이고 반복문에서 발생할 수 있는 에러를 방지 할 수 있는 장점이 있다.
	for(변수 타입 변수명 : 배열){
		// 반복 실행할 코드
	}

4. 메소드 (method)
	0) 함수와 메소드
		클래스 밖에 선언되어 있다면 함수라고 부르지만 클래스 내부에 선언되어 있는 함수는 메소드라고 		부른다.
		Java에서는 모든 함수가 클래스 내부에 선언되기 때문에 메소드가 존재한다.

	1) 메소드
		기능
		이름 뒤에 소괄호
		단, 키워드 뒤에 소괄호는 메소드가 아니다.

		main() 			-> 메인 메소드
		println() 		-> 출력 메소드
		next()			-> 입력 메소드
		for()			-> for 반복문

	2) 메소드 선언과 구현(정의)
		return 타입 메소드명 (자료형 매개변수, ...) <----선언부
		{
			실행할 문장;
			return 반환 값;
		}

	- return 타입 : 반환할 값이 있다면 반환값의 자료형을 작성한다. 없다면 void로 작성한다.
	
	- 메소드명 : 동사로 작성한다. 해당 기능을 알기 쉽도록 작성한다.

	- 매개변수(parameter) : 외부에서 전달 받을 값이 있다면 자료형과 순서에 맞게 선언해준다.(자료형이 반드시 필요하다.)
				(생략할 수 있다. --> 외부에서 값을 받아올 수 없다)

	- 생략할 문장 : 생략이 가능한다. 메소드의 기능을 구현하는 코드를 작성한다.
	- return : 생략이 가능하며, return 이 실행되면 메소드가 종료된다.
		return 값이 있다면 메소드를 사용한 부분을 통째로 return 값으로 본다.
		return 값이 없다면 값이 아니다.
	
	3) 메소드의 정의와 사용

		메소드를 정의할 떄는 {} 중괄호가 있고, 반드시 메소드 밖에서 정의한다.
		메소드를 사용할 때는 {}가 없고, 반드시 메소드 안에서 사용한다.

	
	4) 메소드 정의 순서 ★★★

		return 타입 메소드명 (자료형 매개변수, ...) <----선언부
		{
			실행할 문장;
			return 반환 값;
		}

		(1) 기능을 정의한다.(숫자를 가감하는 기능)

		(2) return 타입(반환 타입)을 생각한다. 기본은 void로 작성
		
		(3) 기능을 알맞는 method 명을 작성 (add,sum, plus, printAdd....)

		(4) 매개변수를 생각한다.
		
		(5) 실행할 문장을 작성한다(구현부)

		(6) 리턴값을 생각한다.
   			int add(int num1, int num2)
   				{
    					int result = num1 + num2;
      					return result;
   				}


	5) 메소드의 호출 방법 4가지
		매개변수 	리턴값 	호출
		X	X	.메소드명();
		O 	X	.메소드명(인수);		//매개변수의 개수만큼 인수 전달
		X	O	syso(.메소드명())		변수 = .메소드명();
		O	O	syso(.메소드명(인수)) 	변수 = .메소드명(인수);
