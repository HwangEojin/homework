day15


1. 내부 클래스(Inner Class)
	클래스 내부에 선언된 클래스를 내부 클래스라고 한다.
	내부 클래스를 가진 클래스를 외부 클래스라고 한다.
	클래스를 구성하는 멤버로 필드, 메소드, 생성자 + 클래스도 가질 수 있다.
	만약 B 클래스를 A클래스에서만 사용한다면 B클래스를 내부 클래스로 만들어서 사용한다.
	외부클래스가 메모리에 할당되어야 내부 클래스의 객체화가 가능하기 때문에 B만 별도로 사용하지 못한다.
	내부클래스는 외부클래스의 멤버이기 때문에 외부클래스의 멤버를 상속 없이 사용할 수 있다.
	
	1) 내부 클래스 사용하는 이유
		내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다.
		코드의 복잡성을 줄일 수 있다.
		캡슐화 : 내부클래스는 외부클래스 내부에서만 사용가능 외부 클래스이 내부 구현을 숨기고 캡슐화 할 수 있다
		코드 가독성, 유지보수성
		+) 웹 개발보다는 앱 개발에서 더 많이 사용된다(우리가 배운 이유는 익명클래스를 이해하기 위함)
	
	2) 내부 클래스의 종류
		선언위치에 따른 분류		선언위치		객체생성조건		파일이름
		인스턴스 내부 클래스		ClassA{		A객체를 생성해야만		A$B.class
					  ClassB{}}  	B객체를 생성 할 수 있다.	A:외부클래스 B:내부클래스

		정적 내부 클래스		ClassA{		A객체를 생성하지 않아도
					 static ClassB{}}B객체를 생성할 수 있다.

		로컬 내부 클래스		ClassA{		method가 실행할때만		A$1B
					void method(){}	B객체를 생성할 수 있다.	A:외부 클래스, B:내부 클래스
						ClassB}




2. 익명 클래스(Anonymous Class)
	이름이 없는 클래스이다.
	미구현된 멤버를 구현하여 일회성으로 객체를 생성하기위해 사용한다.
	인터페이스나 추상클래스를 구현할때 유용하게 사용된다.
	익명클래스는 자식 클래스를 만들지 않고도 인터페이스나 추상클래스를 구현할 수 있기 때문에
	코드의 양을 줄일 수 있고, 일회성으로 사용시에는 불필요한 extends(상속)을 줄일 수 있다.
	익명클래스는 클래스 내부에서 선언하며, 객체를 생성할 때 바로 구현해주는 방식으로 사용된다.
	
	★ 인터페이스는 항상 부모이다. (추상클래스도 동일)
		즉, 익명클래스는 자동으로 implements 되어 부모 자식 관계가 맺어진다.
			** 자식 클래스 객체를 생성하여 부모타입의 변수에 저장되었으니 Up Casting 된 것이다.

3. 람다식(lambda)

	1) 함수형 인터페이스 (Functional Interface)
		단 하나의 추상메소드를 가지고 있는 인터페이스
		@FunctionalInterface 어노테이션을 명시해주면 하나의 추상 메소드만 선언할 수 있도록 제한 할 수 있다.

	2) 람다식 : 익명 메소드
		자바 8버전 부터 사용가능
		메소드를 하나의 식으로 표현한다.
		람다식을 매개변수로도 전달하능 하며, 반환도 가능
		함수형 인터페이스는 추상 메소드가 한개만 선언되기 때문에, 람다식으로 재정의할 때 이름이 필요없다
		함수형 프로그래밍은 함수를 정의하고 이 함수를 데이터를 처리하는 쪽으로 보내 데이터를 처리하는 기법
		데이터를 처리하는 쪽에서는 데이터를 가지고 있고 처리방법이 정해져있지 않아 외부에서 제공된 함수에 의존한다.

		java는 함수형 프로그래밍을 위해 8부터 람다식, 스트림 API를 지원하고 있고
		데이터를 처리하는 쪽에 제공되는 함수역할을 하는 매개변수를 가진 중괄호 블록을 의미한다.
		데이터 처리부는 람다식을 받아 매개변수에 데이터를 대입하고 중괄호를 실행시켜 처리한다.
		
		함수형 인터페이스로 추상메소드가 한 개만 선언되어있을 때, 람다식으로 재정의 가능하다
		메소드를 하나의 식으로 표현한다.

	3) 람다식 문법
		매개변수 -> 바디
		lambda 패키지의 LambdaTest2 클래스 참고
		매개변수가 하나인 경우 자료형 소괄호 생략가능
		매개변수가 두개 이상인 경우 소괄호 생략불가
		실행할 문장이 한 문장일 경우 중괄호, 세미콜론 생략가능
		실행할 문장이 한 문장이라도 return문일 경우에는 생략시 return 생략가능, {}생략하지 않으면 return 작성






	